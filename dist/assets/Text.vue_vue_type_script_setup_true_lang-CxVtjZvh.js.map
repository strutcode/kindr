{"version":3,"file":"Text.vue_vue_type_script_setup_true_lang-CxVtjZvh.js","sources":["../../src/services/location.ts","../../src/components/widgets/Text.vue"],"sourcesContent":["import type { LocationFilter } from '@/types'\nimport { supabase } from '@/lib/supabase'\nimport { createLogger } from '@/lib/logger'\n\nconst { log, debug, info, warn, error } = createLogger('Location')\n\n// Standardized location data interface\ninterface LocationData {\n  latitude: number\n  longitude: number\n  city: string\n  country: string\n  countryCode: string\n  timeZone: string\n  accuracy?: 'high' | 'medium' | 'low'\n  source: 'gps' | 'ip' | 'fallback'\n}\n\nconst DEFAULT_LOCATION: LocationData = {\n  latitude: 34.0522,\n  longitude: -118.2437,\n  city: 'Los Angeles',\n  country: 'United States',\n  countryCode: 'US',\n  timeZone: 'America/Los_Angeles',\n  accuracy: 'low',\n  source: 'fallback',\n}\n\nexport class LocationService {\n  /**\n   * Gets the user's current position using browser geolocation with Supabase fallback\n   */\n  static async getCurrentPosition(): Promise<LocationData> {\n    try {\n      return await LocationService.getGpsPosition()\n    } catch (gpsError) {\n      warn('GPS location failed, trying approximation:', gpsError)\n      try {\n        return await LocationService.getApproxPosition()\n      } catch (supabaseError) {\n        warn('IP location also failed:', supabaseError)\n\n        // Final fallback to default location (Los Angeles, CA)\n        warn('All location methods failed, using default location')\n        return DEFAULT_LOCATION\n      }\n    }\n  }\n\n  /**\n   * Gets the user's current position using browser geolocation\n   */\n  static async getGpsPosition(): Promise<LocationData> {\n    // Try GPS/browser geolocation first\n    info('Attempting to get GPS location...')\n\n    if (!navigator.geolocation) {\n      throw new Error('Geolocation is not supported by this browser')\n    }\n\n    const position = await new Promise<GeolocationPosition>((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(resolve, reject, {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 5 * 60 * 1000, // 5 minutes\n      })\n    })\n\n    info('GPS location successful:', position.coords)\n\n    return {\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude,\n      city: 'Current Location',\n      country: 'Unknown',\n      countryCode: 'Unknown',\n      timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      accuracy: 'high',\n      source: 'gps',\n    }\n  }\n\n  /**\n   * Gets the user's current position by IP approximation\n   */\n  static async getApproxPosition(): Promise<LocationData> {\n    info('Getting approximate location...')\n\n    // Fallback to Supabase edge function using the configured client\n    const { data, error } = await supabase.functions.invoke('get-user-location')\n\n    if (error) {\n      throw new Error(`Supabase function failed: ${error}`)\n    }\n\n    if (!data) {\n      throw new Error('No data received from Supabase function')\n    }\n\n    // Validate response data\n    if (!data.latitude || !data.longitude) {\n      throw new Error('Invalid response: Missing latitude or longitude data')\n    }\n\n    const latitude = parseFloat(data.latitude)\n    const longitude = parseFloat(data.longitude)\n\n    if (isNaN(latitude) || isNaN(longitude)) {\n      throw new Error('Invalid response: Latitude or longitude is not a valid number')\n    }\n\n    if (latitude < -90 || latitude > 90) {\n      throw new Error('Invalid response: Latitude out of valid range (-90 to 90)')\n    }\n\n    if (longitude < -180 || longitude > 180) {\n      throw new Error('Invalid response: Longitude out of valid range (-180 to 180)')\n    }\n\n    info('Supabase location successful:', data)\n\n    return {\n      latitude,\n      longitude,\n      city: data.city || 'Unknown',\n      country: data.country || 'Unknown',\n      countryCode: data.countryCode || 'Unknown',\n      timeZone: data.timeZone || Intl.DateTimeFormat().resolvedOptions().timeZone,\n      accuracy: 'medium',\n      source: 'ip',\n    }\n  }\n\n  // Keep existing utility methods for compatibility\n  static calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n    const R = 3959 // Earth's radius in miles\n    const dLat = this.toRadians(lat2 - lat1)\n    const dLon = this.toRadians(lon2 - lon1)\n\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.toRadians(lat1)) *\n        Math.cos(this.toRadians(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2)\n\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n    return R * c\n  }\n\n  static toRadians(degrees: number): number {\n    return degrees * (Math.PI / 180)\n  }\n\n  static async geocodeAddress(address: string): Promise<{\n    latitude: number\n    longitude: number\n    formatted_address: string\n  }> {\n    // Use Nominatim OpenStreetMap API for geocoding\n    const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\n      address,\n    )}&limit=1`\n    const response = await fetch(url, {\n      headers: {\n        Accept: 'application/json',\n        'User-Agent': 'KindrApp/1.0 (contact@kindr.net)',\n      },\n    })\n    if (!response.ok) throw new Error('Failed to geocode address')\n    const data = await response.json()\n    if (!data || !data[0]) throw new Error('No results found for address')\n    return {\n      latitude: parseFloat(data[0].lat),\n      longitude: parseFloat(data[0].lon),\n      formatted_address: data[0].display_name,\n    }\n  }\n\n  static async reverseGeocode(latitude: number, longitude: number): Promise<string> {\n    // Use Nominatim OpenStreetMap API for reverse geocoding\n    const url = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`\n    const response = await fetch(url, {\n      headers: {\n        Accept: 'application/json',\n        'User-Agent': 'KindrApp/1.0 (contact@kindr.net)',\n      },\n    })\n    if (!response.ok) return `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`\n    const data = await response.json()\n    return data.display_name || `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`\n  }\n\n  static filterRequestsByLocation<T extends { location: { latitude: number; longitude: number } }>(\n    requests: T[],\n    filter: LocationFilter,\n  ): T[] {\n    return requests.filter(request => {\n      const distance = this.calculateDistance(\n        filter.latitude,\n        filter.longitude,\n        request.location.latitude,\n        request.location.longitude,\n      )\n      return distance <= filter.radius\n    })\n  }\n}\n","<template>\n  <label v-if=\"label\" :for=\"id\" class=\"block text-sm font-medium text-gray-700 mb-2\">\n    {{ label }}<span v-if=\"required\" class=\"text-error-600\">*</span>\n  </label>\n  <input\n    :id=\"id\"\n    v-model=\"modelValueProxy\"\n    :type=\"type\"\n    :placeholder=\"placeholder\"\n    :required=\"required\"\n    class=\"input\"\n    :class=\"inputClass\"\n    @input=\"$emit('input', modelValueProxy)\"\n    @keydown.enter.prevent=\"$emit('enter', modelValueProxy)\"\n  />\n</template>\n\n<script setup lang=\"ts\">\n  import { computed } from 'vue'\n\n  interface Props {\n    modelValue: string\n    label?: string\n    id?: string\n    placeholder?: string\n    required?: boolean\n    type?: string\n    inputClass?: string\n  }\n  const props = withDefaults(defineProps<Props>(), {\n    type: 'text',\n  })\n  const emit = defineEmits(['update:modelValue', 'input', 'enter'])\n\n  const modelValueProxy = computed({\n    get: () => props.modelValue,\n    set: v => emit('update:modelValue', v),\n  })\n</script>"],"names":["info","warn","createLogger","DEFAULT_LOCATION","LocationService","gpsError","supabaseError","position","resolve","reject","data","error","supabase","latitude","longitude","lat1","lon1","lat2","lon2","dLat","dLon","a","degrees","address","url","response","requests","filter","request","props","__props","emit","__emit","modelValueProxy","computed","v","label","_createElementBlock","id","required","_hoisted_2","_createElementVNode","$event","type","placeholder","_normalizeClass","inputClass","_cache","$emit","_withKeys","_withModifiers"],"mappings":"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"}