{"version":3,"file":"alerts-C5XLbTOi.js","sources":["../../src/stores/alerts.ts"],"sourcesContent":["import { ref, computed } from 'vue'\nimport { defineStore } from 'pinia'\nimport { supabase } from '@/lib/supabase'\nimport type { Alert, AlertState } from '@/types'\nimport { useAuthStore } from './auth'\n\nexport const useAlertsStore = defineStore('alerts', () => {\n  const authStore = useAuthStore()\n\n  const state = ref<AlertState>({\n    alerts: [],\n    loading: false,\n    error: null,\n  })\n\n  // Computed getters\n  const alerts = computed(() => state.value.alerts)\n  const loading = computed(() => state.value.loading)\n  const error = computed(() => state.value.error)\n  const activeAlerts = computed(() => state.value.alerts.filter(alert => alert.active))\n\n  // Clear error\n  const clearError = () => {\n    state.value.error = null\n  }\n\n  // Fetch all user alerts\n  const fetchAlerts = async () => {\n    if (!authStore.user) return\n\n    try {\n      state.value.loading = true\n      state.value.error = null\n\n      const { data, error } = await supabase\n        .from('alerts')\n        .select('*')\n        .eq('user_id', authStore.user.id)\n        .order('created_at', { ascending: false })\n\n      if (error) throw error\n\n      state.value.alerts =\n        data?.map(alert => ({\n          ...alert,\n          location: {\n            lat: alert.location.coordinates[1],\n            lng: alert.location.coordinates[0],\n          },\n        })) || []\n    } catch (err) {\n      console.error('Error fetching alerts:', err)\n      state.value.error = err instanceof Error ? err.message : 'Failed to fetch alerts'\n    } finally {\n      state.value.loading = false\n    }\n  }\n\n  // Create new alert\n  const createAlert = async (alertData: {\n    name: string\n    location: { lat: number; lng: number }\n    radius_meters: number\n    category?: string\n  }) => {\n    if (!authStore.user) throw new Error('Not authenticated')\n\n    try {\n      state.value.loading = true\n      state.value.error = null\n\n      const { data, error } = await supabase\n        .from('alerts')\n        .insert({\n          user_id: authStore.user.id,\n          name: alertData.name,\n          location: `POINT(${alertData.location.lng} ${alertData.location.lat})`,\n          radius_meters: alertData.radius_meters,\n          category: alertData.category || null,\n        })\n        .select()\n        .single()\n\n      if (error) throw error\n\n      const newAlert: Alert = {\n        ...data,\n        location: {\n          lat: data.location.coordinates[1],\n          lng: data.location.coordinates[0],\n        },\n      }\n\n      state.value.alerts.unshift(newAlert)\n      return newAlert\n    } catch (err) {\n      console.error('Error creating alert:', err)\n      state.value.error = err instanceof Error ? err.message : 'Failed to create alert'\n      throw err\n    } finally {\n      state.value.loading = false\n    }\n  }\n\n  // Update alert\n  const updateAlert = async (alertId: string, updates: Partial<Alert>) => {\n    if (!authStore.user) throw new Error('Not authenticated')\n\n    try {\n      state.value.loading = true\n      state.value.error = null\n\n      const updateData: any = { ...updates }\n\n      // Convert location if provided\n      if (updates.location) {\n        updateData.location = `POINT(${updates.location.lng} ${updates.location.lat})`\n      }\n\n      // Remove id and other read-only fields\n      delete updateData.id\n      delete updateData.user_id\n      delete updateData.created_at\n      updateData.updated_at = new Date().toISOString()\n\n      const { data, error } = await supabase\n        .from('alerts')\n        .update(updateData)\n        .eq('id', alertId)\n        .eq('user_id', authStore.user.id)\n        .select()\n        .single()\n\n      if (error) throw error\n\n      const updatedAlert: Alert = {\n        ...data,\n        location: {\n          lat: data.location.coordinates[1],\n          lng: data.location.coordinates[0],\n        },\n      }\n\n      const index = state.value.alerts.findIndex(alert => alert.id === alertId)\n      if (index >= 0) {\n        state.value.alerts[index] = updatedAlert\n      }\n\n      return updatedAlert\n    } catch (err) {\n      console.error('Error updating alert:', err)\n      state.value.error = err instanceof Error ? err.message : 'Failed to update alert'\n      throw err\n    } finally {\n      state.value.loading = false\n    }\n  }\n\n  // Delete alert\n  const deleteAlert = async (alertId: string) => {\n    if (!authStore.user) throw new Error('Not authenticated')\n\n    try {\n      state.value.loading = true\n      state.value.error = null\n\n      const { error } = await supabase\n        .from('alerts')\n        .delete()\n        .eq('id', alertId)\n        .eq('user_id', authStore.user.id)\n\n      if (error) throw error\n\n      state.value.alerts = state.value.alerts.filter(alert => alert.id !== alertId)\n    } catch (err) {\n      console.error('Error deleting alert:', err)\n      state.value.error = err instanceof Error ? err.message : 'Failed to delete alert'\n      throw err\n    } finally {\n      state.value.loading = false\n    }\n  }\n\n  // Toggle alert active status\n  const toggleAlert = async (alertId: string) => {\n    const alert = state.value.alerts.find(a => a.id === alertId)\n    if (!alert) return\n\n    await updateAlert(alertId, { active: !alert.active })\n  }\n\n  // Initialize store\n  const initialize = () => {\n    if (authStore.user) {\n      fetchAlerts()\n    }\n  }\n\n  // Cleanup\n  const cleanup = () => {\n    state.value.alerts = []\n    state.value.loading = false\n    state.value.error = null\n  }\n\n  return {\n    // State\n    alerts,\n    loading,\n    error,\n    activeAlerts,\n\n    // Actions\n    clearError,\n    fetchAlerts,\n    createAlert,\n    updateAlert,\n    deleteAlert,\n    toggleAlert,\n    initialize,\n    cleanup,\n  }\n})\n"],"names":["useAlertsStore","defineStore","authStore","useAuthStore","state","ref","alerts","computed","loading","error","activeAlerts","alert","clearError","fetchAlerts","data","supabase","err","createAlert","alertData","newAlert","updateAlert","alertId","updates","updateData","updatedAlert","index"],"mappings":"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"}