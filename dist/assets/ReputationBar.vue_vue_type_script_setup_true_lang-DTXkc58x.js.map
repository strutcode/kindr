{"version":3,"file":"ReputationBar.vue_vue_type_script_setup_true_lang-DTXkc58x.js","sources":["../../src/components/listings/ListingPills.vue","../../src/stores/reputation.ts","../../src/components/common/ReputationBar.vue"],"sourcesContent":["<template>\n  <div class=\"listing-pills\">\n    <p class=\"pill\" :class=\"listing.subcategory\">{{ subcategoryText }}</p>\n    <p class=\"pill\" v-for=\"skill in listing.skills_required\">{{ skill }}</p>\n    <p v-if=\"listing.duration_estimate\" class=\"pill\" :class=\"listing.duration_estimate\">\n      {{ durationText }}\n    </p>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\n  import { computed } from 'vue'\n  import { Listing } from '@/types'\n  import { CATEGORIES, DURATION_OPTIONS } from '@/constants'\n\n  const props = defineProps<{\n    listing: Listing\n  }>()\n\n  const subcategoryText = computed(() => {\n    if (props.listing.subcategory) {\n      return CATEGORIES.find(cat => cat.value === props.listing.category)?.subcategories?.find(\n        sub => sub.value === props.listing.subcategory,\n      )?.label\n    }\n    return ''\n  })\n\n  const durationText = computed(() => {\n    if (props.listing.category === 'help-needed') {\n      return DURATION_OPTIONS.find(opt => opt.value === props.listing.duration_estimate)?.label\n    }\n\n    return ''\n  })\n</script>\n\n<style scoped>\n  .listing-pills {\n    @apply flex flex-wrap gap-2;\n    @apply text-sm;\n  }\n\n  .pill {\n    @apply inline-block px-2 py-1 text-xs font-medium rounded-full;\n    @apply text-white bg-gray-400;\n  }\n\n  .pill.help-needed {\n    @apply bg-blue-500;\n  }\n\n  .pill.offer-help {\n    @apply bg-green-500;\n  }\n\n  .pill.request-help {\n    @apply bg-yellow-500;\n  }\n\n  .pill.other {\n    @apply bg-gray-500;\n  }\n</style>\n","import { defineStore } from 'pinia'\nimport { ref, computed, readonly } from 'vue'\nimport { supabase } from '@/lib/supabase'\nimport type { Reputation, Review } from '@/types'\n\nexport const useReputationStore = defineStore('reputation', () => {\n  const reputations = ref<Record<string, Reputation>>({})\n  const loading = ref(false)\n\n  const getReputationDisplay = (userId: string) => {\n    const rep = reputations.value[userId]\n    if (!rep) {\n      return {\n        status: 'unknown' as const,\n        positive: 0,\n        negative: 0,\n        total: 0,\n        positivePercentage: 0,\n        negativePercentage: 0,\n        unknownPercentage: 100,\n      }\n    }\n\n    const total = rep.positive_points + rep.negative_points\n\n    const positivePercentage = (rep.positive_points / Math.max(total, 10)) * 100\n    const negativePercentage = (rep.negative_points / Math.max(total, 10)) * 100\n    const unknownPercentage = 100 - (positivePercentage + negativePercentage)\n\n    return {\n      status: 'known' as const,\n      positive: rep.positive_points,\n      negative: rep.negative_points,\n      total,\n      positivePercentage,\n      negativePercentage,\n      unknownPercentage,\n    }\n  }\n\n  const fetchReputation = async (userId: string) => {\n    if (reputations.value[userId]) return\n\n    loading.value = true\n    try {\n      const { data, error } = await supabase\n        .from('reputation')\n        .select('*')\n        .eq('user_id', userId)\n        .maybeSingle()\n\n      if (error) {\n        throw error\n      }\n\n      if (data) {\n        reputations.value[userId] = data\n      } else {\n        // Create initial reputation record\n        const { data: newRep, error: createError } = await supabase\n          .from('reputation')\n          .insert([\n            {\n              user_id: userId,\n              positive_points: 0,\n              negative_points: 0,\n              total_interactions: 0,\n            },\n          ])\n          .select()\n          .single()\n\n        if (createError) throw createError\n        reputations.value[userId] = newRep\n      }\n    } catch (error) {\n      console.error('Error fetching reputation:', error)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const submitReview = async (reviewData: Omit<Review, 'id' | 'created_at'>) => {\n    loading.value = true\n    try {\n      // Submit review\n      const { data: review, error: reviewError } = await supabase\n        .from('reviews')\n        .insert([reviewData])\n        .select()\n        .single()\n\n      if (reviewError) throw reviewError\n\n      // Calculate points based on review\n      let positivePoints = 0\n      let negativePoints = 0\n\n      // Punctuality scoring\n      if (reviewData.punctuality === 'on-time') positivePoints += 5\n      else if (reviewData.punctuality === 'late') negativePoints += 3\n      else if (reviewData.punctuality === 'no-show') negativePoints += 10\n\n      // Helpfulness scoring\n      if (reviewData.helpfulness === 'helpful') positivePoints += 5\n      else if (reviewData.helpfulness === 'unhelpful') negativePoints += 3\n\n      // Accuracy scoring\n      if (reviewData.accuracy === 'as-described') positivePoints += 5\n      else if (reviewData.accuracy === 'not-as-described') negativePoints += 5\n\n      // Update reputation\n      const { error: repError } = await supabase.rpc('update_reputation', {\n        user_id: reviewData.reviewee_id,\n        positive_delta: positivePoints,\n        negative_delta: negativePoints,\n      })\n\n      if (repError) throw repError\n\n      // Refresh reputation data\n      delete reputations.value[reviewData.reviewee_id]\n      await fetchReputation(reviewData.reviewee_id)\n\n      return { data: review, error: null }\n    } catch (error: any) {\n      return { data: null, error: error.message }\n    } finally {\n      loading.value = false\n    }\n  }\n\n  return {\n    reputations: readonly(reputations),\n    loading: readonly(loading),\n    getReputationDisplay,\n    fetchReputation,\n    submitReview,\n  }\n})\n","<template>\n  <div class=\"space-y-2 w-full\">\n    <div class=\"flex items-center justify-between text-sm\">\n      <span class=\"text-gray-600\">Reputation</span>\n    </div>\n\n    <div class=\"w-full flex space-x-1\">\n      <div\n        v-for=\"segment in segments\"\n        :key=\"segment.index\"\n        class=\"flex-1 h-3 rounded-full transition-all duration-300\"\n        :class=\"segment.colorClass\"\n      />\n    </div>\n\n    <div class=\"flex items-center justify-between text-xs text-gray-500\">\n      <div class=\"flex items-center space-x-4\">\n        <div class=\"flex items-center space-x-1\">\n          <div class=\"w-2 h-2 bg-primary-500 rounded-full\" />\n          <span>positive</span>\n        </div>\n        <div class=\"flex items-center space-x-1\">\n          <div class=\"w-2 h-2 bg-error-500 rounded-full\" />\n          <span>negative</span>\n        </div>\n        <div v-if=\"reputation.status === 'unknown'\" class=\"flex items-center space-x-1\">\n          <div class=\"w-2 h-2 bg-gray-400 rounded-full\" />\n          <span>Unknown</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed } from 'vue'\n\n  interface Props {\n    reputation: {\n      status: 'known' | 'unknown'\n      positive: number\n      negative: number\n      total: number\n      positivePercentage: number\n      negativePercentage: number\n      unknownPercentage: number\n    }\n  }\n\n  const props = defineProps<Props>()\n\n  const segments = computed(() => {\n    const segmentArray = []\n    const positive = Math.round(props.reputation.positivePercentage / 10)\n    const negative = Math.round(props.reputation.negativePercentage / 10)\n    const unknown = 10 - positive - negative\n\n    for (let i = 0; i < positive; i++) {\n      segmentArray.push({\n        index: i,\n        colorClass: 'bg-primary-500',\n      })\n    }\n    for (let i = 0; i < negative; i++) {\n      segmentArray.push({\n        index: i,\n        colorClass: 'bg-error-500',\n      })\n    }\n    for (let i = 0; i < unknown; i++) {\n      segmentArray.push({\n        index: i,\n        colorClass: 'bg-gray-400',\n      })\n    }\n\n    return segmentArray\n  })\n</script>\n"],"names":["props","__props","subcategoryText","computed","_c","_b","_a","CATEGORIES","cat","sub","durationText","DURATION_OPTIONS","opt","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_normalizeClass","listing","_Fragment","skill","_hoisted_2","_toDisplayString","useReputationStore","defineStore","reputations","ref","loading","getReputationDisplay","userId","rep","total","positivePercentage","negativePercentage","unknownPercentage","fetchReputation","data","error","supabase","newRep","createError","submitReview","reviewData","review","reviewError","positivePoints","negativePoints","repError","readonly","segments","segmentArray","positive","negative","unknown","i","_renderList","segment","_hoisted_3","_hoisted_4","reputation","_hoisted_5","_cache"],"mappings":"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"}