{"version":3,"file":"listings-DVxEMigg.js","sources":["../../src/stores/listings.ts"],"sourcesContent":["import { ref } from 'vue'\nimport { defineStore } from 'pinia'\nimport { supabase } from '@/lib/supabase'\nimport { Listing, ListingFilters, MapBounds } from '@/types'\nimport { useAuthStore } from './auth'\n\nconst formatListing = (entry: any): Listing => {\n  return {\n    ...entry,\n    location: {\n      lat: entry.location?.coordinates[1] ?? -47,\n      lng: entry.location?.coordinates[0] ?? 168,\n    },\n    user: {\n      id: entry.user?.id ?? '',\n      full_name: entry.user?.full_name ?? 'Unknown User',\n      avatar_url: entry.user?.avatar_url ?? null,\n    },\n  }\n}\n\nexport const useListingsStore = defineStore('listings', () => {\n  const listings = ref<Listing[]>([])\n  const userListings = ref<Listing[]>([])\n\n  const fetchListings = async () => {\n    try {\n      const res = await supabase\n        .from('listings')\n        .select(`*, user:users!listings_user_id_fkey(id, full_name, avatar_url)`)\n        .eq('active', true)\n        .order('created_at', { ascending: false })\n\n      if (res.error) {\n        throw res.error\n      }\n\n      listings.value = res.data.map(formatListing)\n    } catch (error) {\n      console.error('Error fetching listings:', error)\n    }\n  }\n\n  const fetchSingleListing = async (id: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('listings')\n        .select(`*, user:users!listings_user_id_fkey(id, full_name, avatar_url)`)\n        .eq('id', id)\n        .single()\n\n      if (error) {\n        throw error\n      }\n\n      if (data) {\n        const listing = formatListing(data)\n\n        listings.value.push(listing) // Add to listings array\n        return listing\n      }\n    } catch (error) {\n      console.error('Error fetching single listing:', error)\n    }\n    return null\n  }\n\n  const searchListings = async (query: string): Promise<Listing[]> => {\n    try {\n      const { data, error } = await supabase\n        .from('listings')\n        .select('*')\n        .textSearch('title_description_tags', query)\n\n      if (error) {\n        throw error\n      }\n\n      listings.value = data.map(formatListing)\n\n      return listings.value\n    } catch (error) {\n      console.error('Error searching listings:', error)\n      return []\n    }\n  }\n\n  const fetchUserListings = async (userId: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('listings')\n        .select()\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false })\n\n      if (error) {\n        throw error\n      }\n\n      userListings.value = data.map(formatListing)\n    } catch (error) {\n      console.error('Error fetching user listings:', error)\n    }\n  }\n\n  const deleteListing = async (id: string) => {\n    try {\n      const { error } = await supabase.from('listings').delete().eq('id', id)\n\n      if (error) {\n        throw error\n      }\n    } catch (error) {\n      console.error('Error deleting listing:', error)\n    }\n  }\n\n  const fetchListingsInBounds = async (bounds: MapBounds, filters?: ListingFilters) => {\n    try {\n      const { north, south, east, west } = bounds\n      const { search, category, subcategory, activeOnly } = filters ?? {}\n\n      const { data, error } = await supabase.rpc('get_listings_in_bounds', {\n        north,\n        south,\n        east,\n        west,\n        p_search: (search ?? '').trim() || null, // Only pass search if there is a value\n        p_category: category || null,\n        p_subcategory: (category && subcategory) || null,\n        p_active: activeOnly,\n        p_limit: 99,\n      })\n\n      if (error) {\n        throw error\n      }\n\n      const fixUser = (listing: any) => {\n        return {\n          ...listing,\n          user: {\n            id: listing.user_id,\n            full_name: listing.user_full_name,\n            avatar_url: listing.user_avatar_url,\n          },\n        }\n      }\n\n      debugger\n      listings.value = data.map(fixUser).map(formatListing)\n    } catch (error) {\n      console.error('Error fetching listings in bounds:', error)\n    }\n  }\n\n  const createListing = async (form: Partial<Listing>) => {\n    debugger\n    const authStore = useAuthStore()\n\n    try {\n      const input: any = { user_id: authStore.user?.id, ...form }\n\n      if (input.location) {\n        // Supabase expects a postgis type for location\n        input.location = `POINT(${input.location.lng} ${input.location.lat})`\n      }\n\n      const { data, error } = await supabase\n        .from('listings')\n        .insert([input])\n        .select(`*, user:users!listings_user_id_fkey(id, full_name, avatar_url)`)\n        .single()\n\n      if (error) {\n        throw error\n      }\n\n      if (!data) {\n        throw new Error('No data returned from insert')\n      }\n\n      listings.value.unshift(formatListing(data)) // Add new listing to the front\n      return data as Listing\n    } catch (error) {\n      console.error('Error creating listing:', error)\n    }\n  }\n\n  const updateListing = async (id: string, updates: Partial<Listing>) => {\n    try {\n      const { data, error } = await supabase\n        .from('listings')\n        .update(updates)\n        .eq('id', id)\n        .select(`*, user:users!listings_user_id_fkey(id, full_name, avatar_url)`)\n        .single()\n\n      if (error) {\n        throw error\n      }\n\n      if (data) {\n        const index = listings.value.findIndex(listing => listing.id === id)\n        if (index !== -1) {\n          listings.value[index] = { ...listings.value[index], ...data }\n        }\n      }\n    } catch (error) {\n      console.error('Error updating listing:', error)\n    }\n  }\n\n  return {\n    listings,\n    userListings,\n    fetchListings,\n    fetchSingleListing,\n    fetchUserListings,\n    fetchListingsInBounds,\n    searchListings,\n    createListing,\n    updateListing,\n    deleteListing,\n  }\n})\n"],"names":["formatListing","entry","_a","_b","_c","_d","_e","useListingsStore","defineStore","listings","ref","userListings","res","supabase","error","id","data","listing","userId","bounds","filters","north","south","east","west","search","category","subcategory","activeOnly","fixUser","query","form","authStore","useAuthStore","input","updates","index"],"mappings":"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"}